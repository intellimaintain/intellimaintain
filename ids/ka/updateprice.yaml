parent: 'katype:adjustDatabaseSql'
name: Update Price
required:
  - itemId
  - itemName
  - newPrice
  - oldPrice
  - environment

variables:
  system: EPX

sql:
  check:
    purpose: "Check the price is  ${oldPrice}"
    sql: 'select * from items where item_id=:itemId '
    correctWhen: 'should be equal to :newPrice and itemName should be equal to :itemName'
  resolve:
    purpose: "Change the price of ${itemName} to ${newPrice}"
    sql: 'update item set price=:newPrice where itemId=:itemId and price=:old_price'
  validate:
    purpose: "Check the price is  ${newPrice}"
    sql:  'select * from items where item_id = :itemId '
    correctWhen: 'should be equal to :newPrice'
















# Belongs in the parent Knowledge Acticle
# Delete as soon have that working


checklist:
  checkedUser:
    hint: "Please check the ticket creator is in LDAP and a member of the group 'EPX-Project'"
    safe: true
    by: ldap
    who: operator.email
    success: "user should be a member of group 'EPX-Project'"
  checkedApprover:
    hint: "Please check the approver is in LDAP and a member of the group 'EPX-Project-Admin'"
    safe: true
    by: ldap
    who: approval.to
    success: "user should be a member of group 'EPX-Project-Admin'"
  checkedIssueExists:
    hint: "Please check the item ${itemName} with id ${itemId} exists"
    safe: true
    by: sql
    type: "check"
  requestedApproval:
    hint: "Please request approval from ${approval.to}"
    by: email
    to: approval.to
    template: "template:delete.project.request.approval"
  receivedApproval:
    by: manually
  checkedIssueStillExists:
    hint: "Please check the price is still ${oldPrice}"
    safe: true
    by: sql
    type: "check"
  resolve:
    hint: "Please update the database by updating the price"
    safe: true
    by: sql
    type: resolve
    waitingFor: receivedApproval
  validated:
    hint: "Please check the price has changed to ${newPrice}"
    safe: true
    by: sql
    type: validate
    waitingFor: resolve
  requestClosure:
    hint: "Please ask the user to confirm the price has changed"
    by: email
    to: operator.email
    template: "template:delete.project.agreed.closed"
    waitingFor: validated
  agreeClosure:
    by: manually
    waitingFor: requestClosure
  closed:
    hint: "Please close the ticket"
    by: ticket
    template: "template:delete.project.closed"
    waitingFor: agreeClosure















buttons:
  ValidateTicketCreator:
    message: "Please check the ticket creator is in LDAP and a member of the group 'EPX-Project'"
  ValidateApprover:
    message: "Please check the approver is in LDAP and a member of the group 'EPX-Project-Admin'"
  CheckTicket:
    message: "[CheckSql]"
  RequestApproval:
    text: "Request Approval"
    message: "[Email approval]"
    notWhen: approved
  ResolveTicket:
    message: "[ResolveSql]"
    when: approved
  ValidateTicket:
    message: "[ValidateSql]"
