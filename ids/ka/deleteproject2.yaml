parent: 'katype:adjustDatabaseSql'
name: Delete Project
required:
  - projectId
  - environment

variables:
  system: EPX

sql:
  check:
    purpose: "Check the project ${projectId} exists"
    # we could specify a system but defaults to the variable 'system'
    sql: 'select * from projects where project_id = :projectId'
    correctWhen: atLeastOne
  resolve:
    purpose: "Delete the project with id ${projectId}"
    sql: 'delete from projects where project_id = :projectId'
  validate:
    purpose: "Check the project ${projectId} is not in the database"
    sql: 'select * from projects where project_id = :projectId'
    correctWhen: none









# Belongs in the parent Knowledge Acticle
# Delete as soon have that working


checklistStages:
  checkTicketDetails:
    checkedIssueExists:
      hint: "Please check the project ${projectId} exists"
      safe: true
      by: sql
      type: "check"
    checkedUser:
      hint: "Please check the ticket creator is in LDAP and a member of the group 'EPX-Project'"
      safe: true
      by: ldap
      who: operator.email
      success: "user should be a member of group 'EPX-Project'"
    checkedApprover:
      hint: "Please check the approver is in LDAP and a member of the group 'EPX-Project-Admin'"
      safe: true
      by: ldap
      who: approval.to
      success: "user should be a member of group 'EPX-Project-Admin'"
    requestedApproval:
      hint: "Please request approval from ${approval.to}"
      by: email
      to: approval.to
      template: "template:delete.project.request.approval"
      waitingFor: checkedIssueExists
  resolveTicket:
    receivedApproval:
      by: manually
    checkedIssueStillExists:
      hint: "Please check the project ${projectId} exists"
      safe: true
      by: sql
      type: "check"
    resolve:
      hint: "Please update the database by deleting the project with id ${projectId}"
      safe: true
      by: sql
      type: resolve
      waitingFor: receivedApproval
    validated:
      hint: "Please check the project ${projectId} is not in the database"
      safe: true
      by: sql
      type: validate
      waitingFor: resolve
    requestClosure:
      hint: "Please ask the user to confirm the project ${projectId} is deleted"
      by: email
      to: operator.email
      template: "template:delete.project.agreed.closed"
      waitingFor: validated
  closeTicket:
    agreeClosure:
      by: manually
      waitingFor: requestClosure
    closed:
      hint: "Please close the ticket"
      by: ticket
      template: "template:delete.project.closed"
      waitingFor: agreeClosure









# old and not used any more

buttons:
  CheckTicket:
    action: "sql: check"
    message: "[CheckSql]" # will vanish
    ifSuccess:
      - checkedIssue: true

  ValidateTicketCreator:
    action: "ldap: checkTicketCreator"
    message: "Please check the ticket creator is in LDAP and a member of the group 'EPX-Project'"
    ifSuccess:
      - checkedUser: true

  ValidateApprover:
    action: "ldap: checkApprover"
    message: "Please check the approver is in LDAP and a member of the group 'EPX-Project-Admin'"
    ifSuccess:
      - checkedApprover: true

  RequestApproval:
    action: "email: requestApproval"
    message: "[Email approval]"
    notWhen: approved or sentApprovalEmail
    ifSuccess:
      - sentApprovalEmail: true



  ResolveTicket:
    action: "sql: resolve"
    message: "[ResolveSql]"
    when: approved and checkedUser and checkedApprover

  ValidateTicket:
    action: "sql: validate"
    message: "[ValidateSql]"
    ifSuccess:
      - validated: true

  CloseTicket:
    action: "closeTicket"
    message: "Close the ticket"
    when: validated

